name: Deploy To QA

on:
  workflow_call:

jobs:
  Deploy-to-QA:
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - uses: actions/checkout@v3
      - name: Login to Github
        env:
          COMMIT_AUTHOR: ${{ secrets.CI_COMMIT_AUTHOR }}
          COMMIT_EMAIL: ${{ secrets.CI_COMMIT_EMAIL }}
        run: |
          git config --global user.name env.COMMIT_AUTHOR
          git config --global user.email env.COMMIT_EMAIL
        
      - name: Check if fixed version is on Jira
        env:
          JIRA_TOKEN: ${{ secrets.CI_JIRA_TOKEN }}
          BRANCH_NAME: ${{github.ref_name}}
        run: |
          fixed_version_found=false
          fixed_version=$(echo "$BRANCH_NAME" | grep -Eo '[0-9].[0-9].[0-9]+')
          jira_fixed_version="React-Native SDK v$fixed_version"
          echo "$jira_fixed_version"
          curl -X GET -H "Authorization: Basic $JIRA_TOKEN=" https://appsflyer.atlassian.net/rest/api/3/project/11400/versions | jq -r '.[] | .name+""+.id' | while read version ; do
            if [[ "$version" == *"$jira_fixed_version"* ]] ;then
              echo "$jira_fixed_version Found!"
              fixed_version_found=true
              version_id=${version#"$jira_fixed_version"}
              echo $(curl -X GET -H "Authorization: Basic $JIRA_TOKEN=" https://appsflyer.atlassian.net/rest/api/3/search?jql=fixVersion=$version_id | jq -r '.issues[] | "- " + .fields["summary"]+"@"') > "$jira_fixed_version-releasenotes".txt
              sed -i -r -e "s/@ /\n/gi" "$jira_fixed_version-releasenotes".txt
              sed -i -r -e "s/@/\n/gi" "$jira_fixed_version-releasenotes".txt
            fi
          done
          if [ fixed_version_found == false ];then
            echo "${jira_fixed_version} is not found!"
            exit 1
          fi
          cat "$jira_fixed_version-releasenotes".txt  

      - name: Upload release notes as artifact to use in later workflows
        run: |
          echo "upload"

      - name: Update package.json file
        run: |
          plugin_version=$(echo "${{github.ref_name}}" | grep -Eo '[0-9].[0-9].[0-9]+-rc[0-9]+')
          echo "Updating plugin to version $plugin_version"
          npm version $plugin_version
          git push

      - name: Push to NPM
        env:
          CI_NPM_TOKEN: ${{ secrets.CI_NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$CI_NPM_TOKEN" > ~/.npmrc
          npm publish --tag QA --dry-run

      - name: Generate and send slack report
        env:
          SLACK_TOKEN: ${{ secrets.CI_SLACK_TOKEN }}
        run: | 
          ios_sdk_version=$(cat README.md | grep 'iOS AppsFlyerSDK \*\*v[0-9].[0-9].[0-9]\*\*')
          android_sdk_version=$(cat README.md | grep 'Android AppsFlyerSDK \*\*v[0-9].[0-9].[0-9]\*\*')
          fixed_version=$(echo "${{github.ref_name}}" | grep -Eo '[0-9].[0-9].[0-9]+')
          jira_fixed_version="React-Native SDK v$fixed_version"
          CHANGES=$(cat "$jira_fixed_version-releasenotes".txt)
          curl -X POST -H 'Content-type: application/json' --data '{"jira_fixed_version": "'"$jira_fixed_version"'", "deploy_type": "QA", "install_tag": "QA", "git_branch": "'"${{github.ref_name}}"'", "changes_and_fixes": "'"$CHANGES"'", "android_dependencie": "'"$android_sdk_version"'", "ios_dependencie": "'"$ios_sdk_version"'"}' "$SLACK_TOKEN"